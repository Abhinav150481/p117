# -*- coding: utf-8 -*-
"""p117

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ut_Y4S1JB89eQ5b2PIKTO5Yb_hNxaKE6
"""

from google.colab import files
data_to_load=files.upload()

import pandas as pd
df=pd.read_csv("data.csv")
print(df.head())

from sklearn.model_selection import train_test_split
variance=df["variance"]
clas=df["class"]
variance_train,variance_test,clas_train,clas_test=train_test_split(variance,clas,test_size=0.25,random_state=0)

from sklearn.linear_model import LogisticRegression
import numpy as np
X=np.reshape(variance_train.ravel(),(len(variance_train),1))
Y=np.reshape(clas_train.ravel(),(len(clas_train),1))
classifier=LogisticRegression(random_state=0)
classifier.fit(X,Y)

X_test=np.reshape(variance_test.ravel(),(len(variance_test),1))
Y_test=np.reshape(clas_test.ravel(),(len(clas_test),1))
heart_attack_prediction=classifier.predict(X_test)
predicted_values=[]
for i in  heart_attack_prediction:
  if i == 0:
    predicted_values.append("Authorised")
  else:
    predicted_values.append("forged")
actual_values=[]
for i in  Y_test.ravel():
  if i == 0:
    actual_values.append("Authorised")
  else:
    actual_values.append("forged")

labels=["forged","authorised"]
cm = confusion_matrix(actual_values,predicted_values)

ax=plt.subplot()
sns.heatmap(cm,annot=True,ax=ax)

ax.set_xlabel('Predicted')
ax.set_ylabel('Actual')
ax.set_title('confusion matrix')
ax.xaxis.set_ticklabels(labels);ax.yaxis.set_ticklabels(labels)

Accuracy = (1.2e+02 + 1.7e+02)*100/(1.2e+02 + 1.7e+02 + 27 + 29)
print("Accuracy:- ",Accuracy)

factors = df[["variance",  "skewness",  "curtosis",  "entropy",  "class"]]
heart_attack = df["class"]

factors_train, factors_test, heart_attack_train, heart_attack_test = train_test_split(factors, heart_attack, test_size = 0.25, random_state = 0)

from sklearn.preprocessing import StandardScaler
sc_x=StandardScaler()
factors_train=sc_x.fit_transform(factors_train)
factors_test=sc_x.fit_transform(factors_test)

classifier2 = LogisticRegression(random_state = 0) 
classifier2.fit(factors_train, heart_attack_train)

heart_attack_prediction_1 = classifier2.predict(factors_test)

predicted_values_1 = []
for i in heart_attack_prediction_1:
  if i == 0:
    predicted_values_1.append("No")
  else:
    predicted_values_1.append("Yes")

actual_values_1 = []
for i in heart_attack_test.ravel():
  if i == 0:
    actual_values_1.append("No")
  else:
    actual_values_1.append("Yes")

cm = confusion_matrix(actual_values_1, predicted_values_1)

ax= plt.subplot()
sns.heatmap(cm, annot=True, ax = ax)

ax.set_xlabel('Predicted')
ax.set_ylabel('Actual') 
ax.set_title('Confusion Matrix')
ax.xaxis.set_ticklabels(labels); ax.yaxis.set_ticklabels(labels)

Accuracy=( 1.5e+02 + 2e+02 )*100/(1.5e+02 + 2e+02 + 0 + 0)
print("Accuracy:- ",Accuracy)